{"version":3,"sources":["assets/images/logo.svg","assets/images/superman.png","assets/images/flag.svg","assets/images/mine.svg","components/uiElements/Input/Input.js","components/uiElements/Button/Button.js","shared/context/game-context.js","shared/utils/utils.js","components/game/GameSettings/GameSettings.js","shared/utils/constants.js","components/layout/Sidebar/Sidebar.js","components/uiElements/Card/Card.js","components/game/StopWatch/StopWatch.js","components/game/ScorePanel/ScorePanel.js","components/game/Cell/Cell.js","components/game/Board/Board.js","components/game/GameContainer/GameContainer.js","components/layout/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","inputReducer","state","action","type","value","val","isTouched","Input","props","useReducer","initialValue","inputState","dispatch","id","onInput","useEffect","className","htmlFor","label","placeholder","onChange","event","parsedValue","target","parseInt","validators","onBlur","Button","onClick","disabled","children","GameContext","createContext","gameSettings","onStartNewGame","isSupermanMode","isGameLost","onRevealBombs","randomInt","min","max","Math","floor","random","maxMines","setMinesLocation","boardWidth","boardHeight","minesNumber","randomRow","randomCol","remainedMines","retVal","row","push","col","getNeighboursCoordinates","formReducer","formIsValid","inputId","inputs","isValid","height","width","GameSettings","gameContext","useContext","mines","formState","inputHandler","useCallback","validateForm","onSubmit","preventDefault","onFirstMove","minesLocation","errorText","Sidebar","src","LogoImage","alt","SupermanImage","Card","content","StopWatch","isFirstMove","useState","seconds","setSeconds","secondsHandler","interval","setInterval","clearInterval","ScorePanel","steps","remainingFlags","Cell","isRevealed","isShiftPressed","shiftKey","onCellEvent","isFlagged","FlagImage","minedNeighboursAmount","isMined","MineImage","MakeCell","this","minesFlaggedCounter","Board","board","setBoard","initBoard","cell","cellClickHandler","updatedBoard","onShiftAndClickEvent","onClickEvent","onGameOver","onFlagEvent","onGameWin","getMinedNeighboursAmount","revealNotMinedNeighbours","onStepEvent","queue","shift","neighboursCoordinates","neighbourRow","neighbourCol","forEach","neighbour","length","map","rowIndex","key","colIndex","GameContainer","setSteps","setRemainingFlags","startNewGame","alert","Main","App","setGameSettings","startNewGameHandler","obj","isSumermanMode","setIsSupermanMode","setIsLost","setIsFirstMove","revealBombsHandler","shouldReveal","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.061d5eb7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ffc12d8d.svg\";","module.exports = __webpack_public_path__ + \"static/media/superman.bc36d176.png\";","module.exports = __webpack_public_path__ + \"static/media/flag.87f1c762.svg\";","module.exports = __webpack_public_path__ + \"static/media/mine.9638be07.svg\";","import React, { useReducer, useEffect } from \"react\";\r\n\r\nimport \"./Input.scss\";\r\n\r\n// Manage the input state\r\nconst inputReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"CHANGE\":\r\n      // The new state that will be returned \r\n      return {\r\n        ...state, // the old state properties\r\n        value: action.val, // overding value property\r\n      };\r\n    case \"TOUCH\":\r\n      return {\r\n        ...state,\r\n        isTouched: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst Input = (props) => {\r\n  const [inputState, dispatch] = useReducer(inputReducer, {\r\n    value: props.initialValue || '',\r\n    isTouched: false\r\n  });\r\n\r\n  // useEffect runs logic when the input value change or input validity change\r\n  // gets array of dependencies that should trigger the function\r\n  const { id, onInput } = props;\r\n  const { value } = inputState;\r\n  useEffect(() => {\r\n    onInput(id, value);\r\n  }, [id, value, onInput]);\r\n\r\n  const changeHandler = (event) => {\r\n    // Dispatching the action\r\n\r\n    let parsedValue =\r\n      props.type === 'number' && event.target.value > 0\r\n        ? parseInt(event.target.value)\r\n        : event.target.value;\r\n\r\n    dispatch({\r\n      type: \"CHANGE\",\r\n      val: parsedValue,\r\n      validators: props.validators,\r\n    });\r\n  };\r\n\r\n  const touchHandler = () => {\r\n    dispatch({\r\n      type: 'TOUCH'\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"input-container\">\r\n      <label htmlFor={props.id} className=\"label m-b-5\">\r\n        {props.label}\r\n      </label>\r\n      <input\r\n        className=\"input\"\r\n        id={props.id}\r\n        type={props.type}\r\n        placeholder={props.placeholder}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\n\r\nimport \"./Button.scss\";\r\n\r\nconst Button = (props) => {\r\n  return (\r\n    <button\r\n      className={`button ${props.className}`}\r\n      type={props.type}\r\n      onClick={props.onClick}\r\n      disabled={props.disabled}\r\n    >\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import { createContext } from 'react';\r\n\r\nexport const GameContext = createContext({\r\n  gameSettings: {},\r\n  onStartNewGame: () => {},\r\n  isSupermanMode: false,\r\n  isGameLost: false,\r\n  onRevealBombs: () => { }\r\n});","export function randomInt(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport const setMinesLocation = (boardWidth, boardHeight, minesNumber) => {\r\n  let remainedMines = minesNumber;\r\n  let randomRow, randomCol;\r\n  let retVal = [];\r\n\r\n  for (let row = 0; row < boardHeight; row++) {\r\n    retVal.push([]);\r\n    for (let col = 0; col < boardWidth; col++) {\r\n      retVal[row][col] = false;\r\n    }\r\n  }\r\n\r\n  while (remainedMines > 0) {\r\n    randomRow = randomInt(0, boardHeight - 1);\r\n    randomCol = randomInt(0, boardWidth - 1);\r\n\r\n    if (retVal[randomRow][randomCol] !== true) {\r\n      retVal[randomRow][randomCol] = true;\r\n      remainedMines--;\r\n    }\r\n  }\r\n  return retVal;\r\n};\r\n\r\nexport const getNeighboursCoordinates = (row, col, boardWidth, boardHeight) => {\r\n  let retVal = [];\r\n\r\n  if (row > 0) { retVal.push([row - 1, col]) }                                  // up [row - 1][col]\r\n  if (row > 0 && col < boardWidth - 1) { retVal.push([row - 1, col + 1]) }           // up-right    [row - 1][col + 1]\r\n  if (col < boardWidth - 1) { retVal.push([row, col + 1]) }                          // right       [row][col+1]\r\n  if (row < boardHeight - 1 && col < boardWidth - 1) { retVal.push([row + 1, col + 1]) }  // right-down  [row + 1][col + 1]\r\n  if (row < boardHeight - 1) { retVal.push([row + 1, col]) }                         // down        [row + 1][col]\r\n  if (row < boardHeight - 1 && col > 0) { retVal.push([row + 1, col - 1]) }          // down-left   [row + 1][col - 1]\r\n  if (col > 0) { retVal.push([row, col - 1]) }                                  // left        [row][col - 1]\r\n  if (row > 0 && col > 0) { retVal.push([row - 1, col - 1]) }                   // up-left     [row - 1][col - 1]\r\n\r\n  return retVal; // [[i, j], [i,j]]\r\n}","import React, { useCallback, useReducer, useContext } from \"react\";\r\n\r\nimport Input from \"../../uiElements/Input/Input\";\r\nimport Button from \"../../uiElements/Button/Button\";\r\nimport { GameContext } from '../../../shared/context/game-context';\r\nimport { setMinesLocation } from \"../../../shared/utils/utils\";\r\nimport {\r\n  BOARD_WIDTH_INIT,\r\n  BOARD_HEIGHT_INIT,\r\n  BOARD_MINES_INIT,\r\n  MIN_BOARD_WIDTH,\r\n  MAX_BOARD_WIDTH,\r\n  MIN_BOARD_HEIGHT,\r\n  MAX_BOARD_HEIGHT,\r\n  MIN_MINES_AMOUNT\r\n} from '../../../shared/utils/constants';\r\nimport \"./GameSettings.scss\";\r\n\r\nconst formReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"INPUT_CHANGE\":\r\n      let formIsValid = true;\r\n\r\n      // inputId => width / height / mines\r\n      for (const inputId in state.inputs) {\r\n        if (!state.inputs[inputId]) {\r\n          continue;\r\n        }\r\n        if (inputId === action.inputId) {\r\n          formIsValid = formIsValid && action.isValid;\r\n        } else {\r\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n        }\r\n      }\r\n\r\n      // Calculate max mines number\r\n      if (action.inputId === 'width') {\r\n        maxMines = action.value * state.inputs.height.value;\r\n      }\r\n      else if (action.inputId === 'height') {\r\n        maxMines = action.value * state.inputs.width.value;\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        inputs: {\r\n          ...state.inputs,\r\n          // overding the state of the spesific input we changed\r\n          [action.inputId]: {\r\n            value: action.value,\r\n            isValid: action.isValid,\r\n          },\r\n        },\r\n        isValid: formIsValid,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nlet maxMines;\r\n\r\nconst GameSettings = () => {\r\n  const gameContext = useContext(GameContext);\r\n  \r\n  const [formState, dispatch] = useReducer(formReducer, {\r\n    inputs: {\r\n      width: {\r\n        value: BOARD_WIDTH_INIT,\r\n        isValid: true,\r\n      },\r\n      height: {\r\n        value: BOARD_HEIGHT_INIT,\r\n        isValid: true,\r\n      },\r\n      mines: {\r\n        value: BOARD_MINES_INIT,\r\n        isValid: true,\r\n      },\r\n    },\r\n    isValid: true\r\n  });\r\n\r\n  const inputHandler = useCallback((id, value) => {\r\n    dispatch({\r\n      type: \"INPUT_CHANGE\",\r\n      value: value,\r\n      isValid: validateForm(id, value),\r\n      inputId: id,\r\n    });\r\n  }, []);\r\n\r\n  const validateForm = (id, value) => {\r\n    let retVal;\r\n\r\n    switch (id){\r\n      case 'width':\r\n        retVal = value > MIN_BOARD_WIDTH && value <= MAX_BOARD_WIDTH;\r\n        break;\r\n      case 'height':\r\n        retVal = value > MIN_BOARD_WIDTH && value <= MAX_BOARD_WIDTH;\r\n        break;\r\n      case 'mines':\r\n        retVal = value > MIN_MINES_AMOUNT && value <= maxMines;\r\n        break;\r\n      default:\r\n        return 0;\r\n    }\r\n\r\n    return retVal;\r\n  };\r\n\r\n  const startNewGameHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    let width = formState.inputs.width.value;\r\n    let height = formState.inputs.height.value;\r\n    let mines = formState.inputs.mines.value;\r\n\r\n    gameContext.onRevealBombs('SUPERMAN_MODE', false);\r\n    gameContext.onRevealBombs('GAME_OVER', false);\r\n    gameContext.onFirstMove(false);\r\n\r\n    gameContext.onStartNewGame({\r\n      width,\r\n      height,\r\n      mines,\r\n      minesLocation: setMinesLocation(width, height, mines),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-settings p-x-20 p-y-20\">\r\n      <h1 className=\"game-settings-title m-t-0 m-b-10\">Game Settings</h1>\r\n      <form className=\"form\" onSubmit={startNewGameHandler}>\r\n        {/* Width */}\r\n        <div className=\"input-contianer\">\r\n          <Input\r\n            id=\"width\"\r\n            type=\"number\"\r\n            label=\"Board width\"\r\n            errorText={`Please enter a number between ${MIN_BOARD_WIDTH} to ${MAX_BOARD_WIDTH}`}\r\n            onInput={inputHandler}\r\n            initialValue={formState.inputs.width.value}\r\n          />\r\n          {!formState.inputs.width.isValid && (\r\n            <p className=\"error-text m-y-5\">{`Please enter a number between ${MIN_BOARD_WIDTH} to ${MAX_BOARD_WIDTH}`}</p>\r\n          )}\r\n        </div>\r\n\r\n        {/* Height */}\r\n        <div className=\"input-contianer\">\r\n          <Input\r\n            id=\"height\"\r\n            type=\"number\"\r\n            label=\"Board height\"\r\n            errorText={`Please enter a number between ${MIN_BOARD_WIDTH} to ${MAX_BOARD_WIDTH}`}\r\n            onInput={inputHandler}\r\n            initialValue={formState.inputs.height.value}\r\n          />\r\n          {!formState.inputs.height.isValid && (\r\n            <p className=\"error-text m-t-5\">{`Please enter a number between ${MIN_BOARD_HEIGHT} to ${MAX_BOARD_HEIGHT}`}</p>\r\n          )}\r\n        </div>\r\n\r\n        {/* Mines */}\r\n        <div className=\"input-contianer\">\r\n          <Input\r\n            id=\"mines\"\r\n            type=\"number\"\r\n            label=\"Mines number\"\r\n            errorText={`Please enter a number between 1 to ${maxMines}`}\r\n            onInput={inputHandler}\r\n            initialValue={formState.inputs.mines.value}\r\n          />\r\n          {!formState.inputs.mines.isValid && (\r\n            <p className=\"error-text m-t-5\">{`Please enter a number between ${MIN_MINES_AMOUNT} to ${maxMines}`}</p>\r\n          )}\r\n        </div>\r\n\r\n\r\n        {/* Submit */}\r\n        <Button\r\n          className=\"success m-auto m-t-5\"\r\n          type=\"submit\"\r\n          disabled={!formState.isValid}\r\n        >\r\n          Start game\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameSettings;\r\n","// Board init values\r\nexport const BOARD_WIDTH_INIT = 10;\r\nexport const BOARD_HEIGHT_INIT = 6;\r\nexport const BOARD_MINES_INIT = 6;\r\n\r\n// Board range\r\nexport const MIN_BOARD_WIDTH = 1;\r\nexport const MAX_BOARD_WIDTH = 300;\r\nexport const MIN_BOARD_HEIGHT = 1;\r\nexport const MAX_BOARD_HEIGHT = 300;\r\n\r\n// MINES\r\nexport const MIN_MINES_AMOUNT = 1;\r\n\r\n\r\n\r\n\r\n","import React, { useContext } from \"react\";\r\n\r\nimport GameSettings from \"../../game/GameSettings/GameSettings\";\r\nimport { GameContext } from '../../../shared/context/game-context';\r\nimport LogoImage from \"../../../assets/images/logo.svg\";\r\nimport SupermanImage from \"../../../assets/images/superman.png\";\r\nimport \"./Sidebar.scss\";\r\n\r\nconst Sidebar = () => {\r\n  const { isSupermanMode, onRevealBombs } = useContext(GameContext);\r\n\r\n  const supermanModeHandler = () => {\r\n    onRevealBombs('SUPERMAN_MODE', !isSupermanMode);\r\n  };\r\n\r\n  return (\r\n    <aside className=\"sidebar\">\r\n      <section className=\"logo p-x-5\">\r\n        <img src={LogoImage} alt=\"Minesweeper logo\" className=\"m-r-5\" />\r\n        <h1 className=\"m-y-0\">Minesweeper</h1>\r\n      </section>\r\n      <GameSettings className=\"game-settings\"></GameSettings>\r\n      <section className=\"more-actions p-b-20\">\r\n        <p className=\"m-y-10\">Need a hint ?</p>\r\n        <div className=\"superman-container\">\r\n          <img src={SupermanImage} alt=\"superman\" className=\"superman-button\" onClick={supermanModeHandler}/>\r\n          {isSupermanMode && <p className=\"is-superman-mode m-y-0\">ON</p>}\r\n        </div>\r\n\r\n      </section>\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\n\r\nimport \"./Card.scss\";\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div className=\"card m-x-10\">\r\n      <p className=\"card-content m-t-0 m-b-10\">{props.content}</p>\r\n      <h2 className=\"card-label m-y-0\">{props.label}</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\n\r\nimport Card from '../../uiElements/Card/Card';\r\nimport { GameContext } from '../../../shared/context/game-context';\r\nimport \"./StopWatch.scss\";\r\n\r\nconst StopWatch = () => {\r\n  const { isFirstMove, isGameLost } = useContext(GameContext);\r\n  const [seconds, setSeconds] = useState(0);\r\n\r\n  const secondsHandler = (val) => {\r\n    setSeconds(val);\r\n  }\r\n\r\n  useEffect(() => {\r\n    let interval = null;\r\n\r\n    if (isFirstMove) {\r\n      interval = setInterval(() => {\r\n        secondsHandler(seconds + 1);\r\n      }, 1000);\r\n    } \r\n    else if (isFirstMove === false && seconds !== 0) {\r\n      clearInterval(interval);\r\n      secondsHandler(0);\r\n    }\r\n    if (isGameLost === true) {\r\n      secondsHandler(seconds);\r\n      clearInterval(interval);\r\n    }\r\n\r\n    return () => clearInterval(interval);\r\n  }, [isFirstMove, isGameLost, seconds]);\r\n\r\n  return (\r\n    <Card label=\"Time\" content={seconds}></Card>\r\n  );\r\n};\r\n\r\nexport default StopWatch;\r\n","import React from \"react\";\r\n\r\nimport Card from '../../uiElements/Card/Card';\r\nimport StopWatch from '../../game/StopWatch/StopWatch';\r\nimport \"./ScorePanel.scss\";\r\n\r\nconst ScorePanel = (props) => {\r\n  return (\r\n    <div className=\"score-panel\">\r\n      <StopWatch isFirstMove={props.isFirstMove}></StopWatch>\r\n      <Card label=\"Steps\" content={props.steps}></Card>\r\n      <Card label=\"Remaining flags\" content={props.remainingFlags}></Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScorePanel;\r\n","import React, { useContext } from \"react\";\r\n\r\nimport { GameContext } from '../../../shared/context/game-context';\r\nimport FlagImage from '../../../assets/images/flag.svg';\r\nimport MineImage from \"../../../assets/images/mine.svg\";\r\nimport \"./Cell.scss\";\r\n\r\nconst Cell = (props) => {\r\n  const { isSupermanMode, isGameLost } = useContext(GameContext);\r\n\r\n  const cellEventHandler = (event) => {\r\n    let isShiftPressed = event.shiftKey ? true : false;\r\n\r\n    props.onCellEvent(props.row, props.col, isShiftPressed);\r\n  };\r\n\r\n  return (\r\n    <div className={`cell ${props.isRevealed && 'is-revealed'}`} onClick={cellEventHandler}>\r\n      {props.isFlagged ? <img src={FlagImage} alt=\"Flag\" /> : props.minedNeighboursAmount > 0 && props.isRevealed ? <span className={`mined-neighbours mined-neighbours-${props.minedNeighboursAmount}`}>{props.minedNeighboursAmount}</span> : ''}\r\n      {(isSupermanMode && props.isMined) || (isGameLost && props.isMined) ? <img src={MineImage} alt=\"Flag\" /> : ''}\r\n      {/* {props.isMined ? <img src={MineImage} alt=\"Flag\" /> : ''} */}\r\n      {/* {props.minedNeighboursAmount > 0 ? <span className=\"mined-neighbours\">{props.minedNeighboursAmount}</span> : ''} */}\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction MakeCell(row, col, isMined) {\r\n  this.row                   = row;\r\n  this.col                   = col;\r\n  this.isMined               = isMined;\r\n  this.minedNeighboursAmount = 0;\r\n  this.isFlagged             = false;\r\n  this.isRevealed            = false;\r\n};\r\n\r\nexport { Cell, MakeCell };","import React, { useEffect, useCallback, useState, useContext } from \"react\";\r\n\r\nimport { Cell, MakeCell } from \"../Cell/Cell\";\r\nimport { getNeighboursCoordinates } from '../../../shared/utils/utils';\r\nimport { GameContext } from '../../../shared/context/game-context';\r\nimport \"./Board.scss\";\r\n\r\nlet minesFlaggedCounter;\r\n\r\nconst Board = (props) => {\r\n  const { isGameLost, isFirstMove, onFirstMove } = useContext(GameContext);\r\n  const [board, setBoard] = useState([]);\r\n  const { width, height, minesLocation } = props.gameSettings;\r\n\r\n  // Init board\r\n  const initBoard = useCallback((width, height, minesLocation) => {\r\n    minesFlaggedCounter = 0;\r\n    let retVal = [];\r\n\r\n    for (let row = 0; row < height; row++) {\r\n      retVal.push([]);\r\n      for (let col = 0; col < width; col++) {\r\n        let cell = new MakeCell(row, col, minesLocation[row][col]);\r\n        retVal[row][col] = cell;\r\n      }\r\n    }\r\n\r\n    setBoard(retVal);\r\n\r\n    return retVal;\r\n  }, []);\r\n\r\n  // Trigger initBoard upon change in one of the game settings dependencies (i.e --> new game started)\r\n  useEffect(() => {\r\n    initBoard(width, height, minesLocation);\r\n  }, [width, height, minesLocation, initBoard]);\r\n\r\n  // Handler cell click event\r\n  const cellClickHandler = (row, col, isShiftPressed) => {\r\n    if (isFirstMove === false) {\r\n      onFirstMove(true);\r\n    }\r\n\r\n    if (isGameLost !== true) {\r\n      let updatedBoard = board;\r\n\r\n      if (isShiftPressed === true) {\r\n        updatedBoard = onShiftAndClickEvent(board, row, col);\r\n      }\r\n      else if (board[row][col].isFlagged === false && board[row][col].isRevealed === false) {\r\n        // Do logic only if the cell is not flagged and it does not revealed yet\r\n        updatedBoard = onClickEvent(board, row, col);\r\n      }\r\n\r\n      setBoard(updatedBoard);\r\n    }\r\n    else {\r\n      props.onGameOver();\r\n    }\r\n  };\r\n\r\n  //#region helper functions\r\n  const onShiftAndClickEvent = (board, row, col) => {\r\n    let updatedBoard = board;\r\n\r\n    let isFlagged = board[row][col].isFlagged;\r\n\r\n    if (isFlagged === true) {\r\n      if (board[row][col].isMined === true) {\r\n        minesFlaggedCounter = minesFlaggedCounter - 1;\r\n      }\r\n\r\n      updatedBoard[row][col].isFlagged = !board[row][col].isFlagged;\r\n      props.onFlagEvent(-1);\r\n    }\r\n    else {\r\n      if (props.remainingFlags === 0) {\r\n        props.onFlagEvent(0);\r\n      }\r\n      else if (props.remainingFlags > 0 && board[row][col].isRevealed === false) {\r\n        updatedBoard[row][col].isFlagged = !board[row][col].isFlagged;\r\n        props.onFlagEvent(1);\r\n      }\r\n\r\n      // Update minesFlaggedCounter\r\n      if (board[row][col].isMined === true && board[row][col].isFlagged === true) {\r\n        minesFlaggedCounter = minesFlaggedCounter + 1;\r\n\r\n        if (minesFlaggedCounter === props.gameSettings.mines) {\r\n          props.onGameWin(); // We have a winner!\r\n        }\r\n      }\r\n    }\r\n\r\n    return updatedBoard;\r\n  }\r\n\r\n  const onClickEvent = (board, row, col) => {\r\n    let updatedBoard = board;\r\n\r\n    if (board[row][col].isMined === true) {\r\n      props.onGameOver(); // You lost\r\n    }\r\n    else {\r\n      let minedNeighboursAmount = getMinedNeighboursAmount(row, col);\r\n\r\n      if (updatedBoard[row][col].isFlagged === false) {\r\n        updatedBoard[row][col].isRevealed = true;\r\n      }\r\n\r\n      if (minedNeighboursAmount > 0) {\r\n        updatedBoard[row][col].minedNeighboursAmount = minedNeighboursAmount;\r\n\r\n      }\r\n      else {\r\n        updatedBoard = revealNotMinedNeighbours(board, row, col);\r\n      }\r\n\r\n      props.onStepEvent(); // Increase steps counter\r\n    }\r\n\r\n    return updatedBoard;\r\n  }\r\n\r\n  const revealNotMinedNeighbours = (board, row, col) => {\r\n    // Based on BFS algorithm\r\n    let updatedBoard = board;\r\n\r\n    let startingCell = updatedBoard[row][col];\r\n    // let visited = [];\r\n    let queue = [startingCell];\r\n\r\n    while (queue.length > 0) {\r\n      const cell = queue.shift();\r\n\r\n      if (updatedBoard[cell.row][cell.col].isFlagged === false) {\r\n        updatedBoard[cell.row][cell.col].isRevealed = true; // visited\r\n      }\r\n\r\n      let neighboursCoordinates = getNeighboursCoordinates(cell.row, cell.col, width, height);\r\n      let neighbourRow;\r\n      let neighbourCol;\r\n      let minedNeighboursAmount;\r\n\r\n      neighboursCoordinates.forEach(neighbour => {\r\n        neighbourRow = neighbour[0]; // row\r\n        neighbourCol = neighbour[1]; // col\r\n        minedNeighboursAmount = getMinedNeighboursAmount(neighbourRow, neighbourCol);\r\n\r\n        if (updatedBoard[neighbourRow][neighbourCol].isRevealed !== true && minedNeighboursAmount === 0 && updatedBoard[neighbourRow][neighbourCol].isFlagged === false) {\r\n          queue.push(board[neighbourRow][neighbourCol]);\r\n        }\r\n        else {\r\n          updatedBoard[neighbourRow][neighbourCol].minedNeighboursAmount = minedNeighboursAmount;\r\n        }\r\n\r\n        if (updatedBoard[neighbourRow][neighbourCol].isFlagged === false) {\r\n          updatedBoard[neighbourRow][neighbourCol].isRevealed = true; // visited\r\n        }\r\n\r\n      });\r\n    }\r\n\r\n    return updatedBoard;\r\n  };\r\n\r\n  const getMinedNeighboursAmount = (row, col) => {\r\n    let neighboursCoordinates = getNeighboursCoordinates(row, col, width, height);\r\n    let retVal = 0;\r\n\r\n    if (neighboursCoordinates.length > 0) {\r\n      let neighbourRow;\r\n      let neighbourCol;\r\n      neighboursCoordinates.forEach(neighbour => {\r\n        neighbourRow = neighbour[0]; // row\r\n        neighbourCol = neighbour[1]; // col\r\n\r\n        if (board[neighbourRow][neighbourCol].isMined === true) {\r\n          retVal++;\r\n        }\r\n      });\r\n    }\r\n\r\n    return retVal;\r\n  };\r\n  //#endregion\r\n\r\n  return (\r\n    <div className=\"board-wrapper m-b-20\">\r\n      <div className=\"board m-auto\">      \r\n        {board.map((row, rowIndex) => {\r\n          return (\r\n            <div className=\"board-row\" key={rowIndex}>\r\n              {row.map((cell, colIndex) => {\r\n                return (\r\n                  <Cell\r\n                    className=\"cell\"\r\n                    key={`${rowIndex}-${colIndex}`}\r\n                    row={rowIndex}\r\n                    col={colIndex}\r\n                    isMined={cell.isMined}\r\n                    isFlagged={cell.isFlagged}\r\n                    isRevealed={cell.isRevealed}\r\n                    minedNeighboursAmount={cell.minedNeighboursAmount}\r\n                    onCellEvent={cellClickHandler}\r\n                  ></Cell>\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\n\r\nimport ScorePanel from \"../ScorePanel/ScorePanel\";\r\nimport Board from \"../Board/Board\";\r\nimport { GameContext } from '../../../shared/context/game-context';\r\nimport { setMinesLocation } from \"../../../shared/utils/utils\";\r\nimport \"./GameContainer.scss\";\r\n\r\nconst GameContainer = () => {\r\n  const { gameSettings, onRevealBombs, onStartNewGame, onFirstMove } = useContext(GameContext);\r\n\r\n  useEffect(() => {\r\n    setSteps(0);\r\n    setRemainingFlags(gameSettings.mines)\r\n  }, [gameSettings])\r\n\r\n  const [steps, setSteps] = useState(0);\r\n  const [remainingFlags, setRemainingFlags] = useState(gameSettings.mines);\r\n\r\n\r\n  const remainingFlagsHandler = (val) => {\r\n    if(remainingFlags === 0 && val === 0) {\r\n      alert('😔 Oh snap, You ran out of flags!');\r\n    }\r\n    else {\r\n      setRemainingFlags(remainingFlags - val);\r\n    }\r\n  };\r\n\r\n  const stepsHandler = () => {\r\n    setSteps(steps + 1);\r\n  };\r\n\r\n  const lossHandler = () => {\r\n    alert(`😓 Game over.. Let's try again!`);\r\n\r\n    onRevealBombs('GAME_OVER', true);\r\n  };\r\n\r\n  const gameWinHandler = () => {\r\n    alert(`✨ Yay! We have a winner! ✨`);\r\n\r\n    startNewGame();\r\n  };\r\n\r\n  const startNewGame = () => {\r\n    let width = gameSettings.width;\r\n    let height = gameSettings.height;\r\n    let mines = gameSettings.mines;\r\n\r\n    onStartNewGame({\r\n      width,\r\n      height,\r\n      mines,\r\n      minesLocation: setMinesLocation(width, height, mines),\r\n    });\r\n\r\n    onRevealBombs('SUPERMAN_MODE', false);\r\n    onRevealBombs('GAME_OVER', false);\r\n    onFirstMove(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-container\">\r\n      <ScorePanel className=\"score-panel\" steps={steps} remainingFlags={remainingFlags}></ScorePanel>\r\n      <Board \r\n        gameSettings={gameSettings} \r\n        onStepEvent={stepsHandler} \r\n        onFlagEvent={remainingFlagsHandler} \r\n        onGameOver={lossHandler}\r\n        onGameWin={gameWinHandler}\r\n        remainingFlags={remainingFlags}></Board>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameContainer;\r\n","import React from \"react\";\r\n\r\nimport GameContainer from \"../../game/GameContainer/GameContainer\";\r\nimport \"./Main.scss\";\r\n\r\nconst Main = () => {\r\n  return (\r\n    <main className=\"main p-x-20\">\r\n      <GameContainer/>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React, { useState, useCallback } from \"react\";\n\nimport Sidebar from \"./components/layout/Sidebar/Sidebar\";\nimport Main from \"./components/layout/Main/Main\";\nimport { GameContext } from './shared/context/game-context';\nimport { setMinesLocation } from \"./shared/utils/utils\";\nimport { BOARD_WIDTH_INIT, BOARD_HEIGHT_INIT, BOARD_MINES_INIT } from './shared/utils/constants';\nimport './App.scss';\n\nfunction App() {\n  const [gameSettings, setGameSettings] = useState({\n    width: BOARD_WIDTH_INIT,\n    height: BOARD_HEIGHT_INIT,\n    mines: BOARD_MINES_INIT,\n    minesLocation: setMinesLocation(BOARD_WIDTH_INIT, BOARD_HEIGHT_INIT, BOARD_MINES_INIT),\n  });\n\n  const startNewGameHandler = useCallback((obj) => {\n    setGameSettings(obj);\n  }, []);\n\n  const [isSumermanMode, setIsSupermanMode] = useState(false);\n  const [isGameLost, setIsLost] = useState(false);\n  const [isFirstMove, setIsFirstMove] = useState(false);\n\n  const revealBombsHandler = useCallback((action, shouldReveal) => {\n    switch (action) {\n      case 'GAME_OVER':\n        setIsLost(shouldReveal);\n        break;\n      case 'SUPERMAN_MODE':\n        setIsSupermanMode(shouldReveal);\n        break;\n      default:\n        break;\n    }\n  }, []);\n\n  const firstMoveHandler = (val) => {\n    setIsFirstMove(val);\n  };\n\n  return (\n    <GameContext.Provider\n      value={{\n        gameSettings: gameSettings,\n        isSupermanMode: isSumermanMode,\n        isGameLost: isGameLost,\n        isFirstMove: isFirstMove,\n        onStartNewGame: startNewGameHandler,\n        onRevealBombs: revealBombsHandler,\n        onFirstMove: firstMoveHandler\n      }}\n    >\n      <div className=\"app\">\n        <Sidebar />\n        <Main />\n      </div>\n    </GameContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}